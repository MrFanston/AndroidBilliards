package com.example.lab2 // Объявление пакета, в котором находится данный класс

import android.graphics.Canvas // Импорт класса Canvas для выполнения операций отрисовки
import android.graphics.Color // Импорт класса Color для работы с цветами
import android.graphics.Paint // Импорт класса Paint для определения стиля и цвета отрисовки

/**
 * Data-класс, представляющий бильярдный шар.
 * Содержит информацию о положении шара, его радиусе, номере, цвете и скорости.
 */
data class Ball(
    var x: Float,           // Текущая координата X центра шара
    var y: Float,           // Текущая координата Y центра шара
    var r: Float,           // Радиус шара
    var number: Int,        // Номер шара (0 - биток, 1-7 сплошные, 8 - черный, 9-15 полосатые)
    var baseColor: Int,     // Основной цвет шара (например, Color.RED, Color.BLUE и т.д.)
    var vx: Float = 0f,     // Начальная скорость по оси X (по умолчанию 0)
    var vy: Float = 0f      // Начальная скорость по оси Y (по умолчанию 0)
){
    /**
     * Обновляет положение шара и обрабатывает столкновения со стенами.
     * Также применяет эффект трения для замедления шара.
     *
     * @param width Ширина игрового поля (стола).
     * @param height Высота игрового поля (стола).
     */
    fun update(width: Float, height: Float) {
        // Обновляем координаты шара на основе его текущей скорости
        x += vx
        y += vy

        // Применяем эффект трения, чтобы шар постепенно замедлялся
        // Скорость умножается на коэффициент < 1 в каждом кадре
        vx *= 0.99f // Уменьшаем скорость по X на 1%
        vy *= 0.99f // Уменьшаем скорость по Y на 1%

        // Обработка отскока от стен игрового поля
        // Если шар выходит за левую границу
        if (x - r < 0) {
            x = r       // Корректируем положение, чтобы шар не "залипал" в стене
            vx = -vx    // Инвертируем скорость по X для отскока
        } else if (x + r > width) { // Если шар выходит за правую границу
            x = width - r // Корректируем положение
            vx = -vx    // Инвертируем скорость по X
        }

        // Если шар выходит за верхнюю границу
        if (y - r < 0) {
            y = r       // Корректируем положение
            vy = -vy    // Инвертируем скорость по Y для отскока
        } else if (y + r > height) { // Если шар выходит за нижнюю границу
            y = height - r // Корректируем положение
            vy = -vy    // Инвертируем скорость по Y
        }
    }

    /**
     * Отрисовывает шар на предоставленном холсте (Canvas).
     * Внешний вид шара зависит от его номера (сплошной, полосатый, белый, черный).
     *
     * @param canvas Холст, на котором будет нарисован шар.
     * @param paint Объект Paint, используемый для настройки параметров отрисовки (цвет, стиль).
     */
    fun draw(canvas: Canvas, paint: Paint) {
        // В зависимости от номера шара выбираем способ его отрисовки
        when (number) {
            in 1..7 -> { // Сплошные шары (номера 1-7)
                paint.color = baseColor // Устанавливаем основной цвет шара
                canvas.drawCircle(x, y, r, paint) // Рисуем сплошной круг
            }
            8 -> { // Черный шар (восьмерка)
                paint.color = Color.BLACK // Устанавливаем черный цвет
                canvas.drawCircle(x, y, r, paint) // Рисуем черный круг
            }
            in 9..15 -> { // Полосатые шары (номера 9-15)
                // Сначала рисуем белый фон для полосатого шара
                paint.color = Color.WHITE
                canvas.drawCircle(x, y, r, paint)

                // Затем рисуем цветную полоску посередине шара
                paint.color = baseColor // Устанавливаем цвет полоски
                canvas.drawRect(x - r, y - r / 2, x + r, y + r / 2, paint)

                // Добавляем черную обводку вокруг шара для лучшей визуализации
                paint.style = Paint.Style.STROKE // Устанавливаем стиль "только обводка"
                paint.color = Color.BLACK      // Цвет обводки - черный
                paint.strokeWidth = 3f         // Толщина линии обводки
                canvas.drawCircle(x, y, r, paint) // Рисуем обводку
                paint.style = Paint.Style.FILL // Возвращаем стиль по умолчанию "заливка" для последующих отрисовок
            }
            else -> { // Белый шар
                paint.color = Color.WHITE // Устанавливаем белый цвет
                canvas.drawCircle(x, y, r, paint) // Рисуем белый круг
            }
        }
    }
}
